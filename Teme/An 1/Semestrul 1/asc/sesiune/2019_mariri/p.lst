     1                                  bits 32
     2                                  
     3                                  global start
     4                                  extern exit, printf
     5                                  
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  
     9                                  segment data use32 class=data
    10 00000000 78A634123456781226-         s1 dd 1234a678h, 12785634h, 1a4d3c26h
    10 00000009 3C4D1A             
    11                                      len equ ($-s1) / 4
    12 0000000C <res 00000006>              s2 times len resw 1
    13 00000012 00000000                    nr_biti_1 dd 0
    14 00000016 4E756D6172756C2064-         format db 'Numarul de biti de 1 este: %d', 0
    14 0000001F 652062697469206465-
    14 00000028 203120657374653A20-
    14 00000031 256400             
    15                                      
    16                                  segment code use32 class=code
    17                                      calculeaza: ; primeste parametrul in registrul ax si returneaza nr de biti de 1 in edx
    18 00000000 51                              push ecx
    19 00000001 31D2                            xor edx, edx
    20 00000003 B910000000                      mov ecx, 16
    21                                          repeta:
    22 00000008 66D1E8                              shr ax, 1
    23 0000000B 83D200                              adc edx, 0
    24 0000000E E2F8                            loop repeta
    25 00000010 59                              pop ecx
    26 00000011 C3                              ret
    27                                      
    28                                      start:
    29 00000012 FC                              cld
    30 00000013 B903000000                      mov ecx, len
    31 00000018 BB[00000000]                    mov ebx, s1
    32 0000001D BA00000000                      mov edx, 0
    33 00000022 BF[0C000000]                    mov edi, s2
    34                                          muta:
    35 00000027 8A449301                            mov al, [ebx+4*edx+1]
    36 0000002B AA                                  stosb
    37 0000002C 8A449303                            mov al, [ebx+4*edx+3]
    38 00000030 AA                                  stosb
    39 00000031 42                                  inc edx
    40 00000032 E2F3                            loop muta
    41                                          
    42                                          ; in urma loop ului avem construit sirul s2 de word uri format din octetii superiori din cuvintele dd urilor din sirul s1 (sir dat)
    43                                          
    44 00000034 B903000000                      mov ecx, len
    45 00000039 BE[0C000000]                    mov esi, s2
    46                                          aduna:
    47 0000003E 66AD                                lodsw
    48 00000040 E8BBFFFFFF                          call calculeaza
    49 00000045 0115[12000000]                      add [nr_biti_1], edx
    50 0000004B E2F1                            loop aduna
    51                                          
    52 0000004D FF35[12000000]                  push dword [nr_biti_1]
    53 00000053 68[16000000]                    push format
    54 00000058 FF15[00000000]                  call [printf]
    55 0000005E 83C408                          add esp, 4*2
    56                                          
    57 00000061 6A00                            push dword 0
    58 00000063 FF15[00000000]                  call [exit]
